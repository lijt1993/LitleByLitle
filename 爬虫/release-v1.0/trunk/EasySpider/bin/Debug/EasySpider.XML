<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasySpider</name>
    </assembly>
    <members>
        <member name="T:EasySpider.CHttpWebRequest">
            <summary>
            对HttpWebRequest做上一层封装
            </summary>
        </member>
        <member name="F:EasySpider.CHttpWebRequest.LimitedHeaders">
            <summary>
            受限制的标头数组以及对于的设置方法。某些公共标头被视为受限制的，它们或者直接由 API（如 Content-Type）公开，或者受到系统保护，不能被更改。
            </summary>
        </member>
        <member name="M:EasySpider.CHttpWebRequest.#cctor">
            <summary>
            静态构造
            </summary>
        </member>
        <member name="M:EasySpider.CHttpWebRequest.#ctor(System.String)">
            <summary>
            构造一个CHttpWebRequest实例
            </summary>
            <param name="url">标识 Internet 资源的 URI</param>
        </member>
        <member name="M:EasySpider.CHttpWebRequest.SetHeader(System.String,System.String)">
            <summary>
            设置当前HttpWebRequest实例的http标头
            </summary>
            <param name="name">http标头名称</param>
            <param name="value">http标头值</param>
        </member>
        <member name="M:EasySpider.CHttpWebRequest.RemoveExpect">
            <summary>
            移除请求标头中的Expect标头
            </summary>
        </member>
        <member name="M:EasySpider.CHttpWebRequest.SetAutoRedirect(System.Int32)">
            <summary>
            设置设置请求将跟随的重定向的最大数目，如果数目小等于0则关闭请求重定向（HttpWebRequest默认开启请求重定向，且最大数目为50）
            </summary>
            <param name="num">重定向数目</param>
        </member>
        <member name="P:EasySpider.CHttpWebRequest.Target">
            <summary>
            创建当前对象时对应的HttpWebRequest实例
            </summary>
        </member>
        <member name="T:EasySpider.CHttpWebResponse">
            <summary>
            对HttpWebResponse做上一层封装
            </summary>
        </member>
        <member name="F:EasySpider.CHttpWebResponse.undecodeContent">
            <summary>
            使用默认编码对服务器输出内容解码后的字符串，很有可能乱码，所以设置为私有
            </summary>
        </member>
        <member name="M:EasySpider.CHttpWebResponse.GetContent(System.Text.Encoding,System.Boolean)">
            <summary>
            从当前实例中获取服务器返回的内容
            </summary>
            <param name="encode">指定编码，如果未指定则使用自动职别编码</param>
            <param name="close">指定获取内容以后是否释放资源</param>
            <returns>返回一个字符串，如果获取内容失败，则返回一个空字符串</returns>
        </member>
        <member name="M:EasySpider.CHttpWebResponse.GetContent">
            <summary>
            从当前实例中获取服务器返回的内容，并释放相关资源
            </summary>
            <returns>返回一个字符串，如果获取内容失败，则返回一个空字符串</returns>
        </member>
        <member name="M:EasySpider.CHttpWebResponse.GetFileName">
            <summary>
            根据当前实例的url以及mime类型，获取一个文件名
            </summary>
            <returns>返回文件名</returns>
        </member>
        <member name="M:EasySpider.CHttpWebResponse.GetWebPage">
            <summary>
            将当前服务器返回HTML的封装为一个WebPage实例并返回
            </summary>
            <returns>返回一个WebPage实例</returns>
        </member>
        <member name="M:EasySpider.CHttpWebResponse.SetMemoryStream">
            <summary>
            将当前HttpWebResponse实例中的服务器返回流复制到一个MemoryStream的实例
            </summary>
        </member>
        <member name="M:EasySpider.CHttpWebResponse.Close">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:EasySpider.CHttpWebResponse.Dispose">
            <summary>
            实现IDisposable接口
            </summary>
        </member>
        <member name="M:EasySpider.CHttpWebResponse.GetEncoding">
            <summary>
            获取当前实例所用的编码，优先级为：HttpWebResponse.Headers["Content-Type"] -> html中的meta中的Content-Type -> 默认配置编码
            </summary>    
            <returns>返回一个Encoding实例，如果获取失败，则返回默认配置的ResponseEncode</returns>
        </member>
        <member name="M:EasySpider.CHttpWebResponse.GetContentTypeByCharacterSet">
            <summary>
            从HttpResponse.CharacterSet获取Content-Type
            </summary>
            <returns></returns>
        </member>
        <member name="M:EasySpider.CHttpWebResponse.GetContentTypeByMeta">
            <summary>
            从一个html字符串中，获取meta中的Content-Type(例如gb2312),如果没有在meta中搜索到Content-Type，则返回null
            </summary>        
            <returns>返回一个编码类型的字符串，例如gb2312，如果没有在meta中搜索到Content-Type，则返回null</returns>
        </member>
        <member name="M:EasySpider.CHttpWebResponse.GetContentTypeByHeader">
            <summary>
            从一个HttpWebResponseHeaders中获取Content-Type(例如gb2312),如果没有在HttpResponse.Headers中搜索到Content-Type，则返回null
            </summary>
            <returns>返回一个编码类型的字符串，例如gb2312，如果没有在HttpResponse.Headers中搜索到Content-Type，则返回null</returns>
        </member>
        <member name="M:EasySpider.CHttpWebResponse.SetUndecodeContent">
            <summary>
            使用默认编码对服务器输出的内容进行解码，设置到this.undecodeContent
            </summary>
        </member>
        <member name="P:EasySpider.CHttpWebResponse.Content">
            <summary>
            服务器返回的文本内容
            </summary>
        </member>
        <member name="P:EasySpider.CHttpWebResponse.Success">
            <summary>
            请求是否成功
            </summary>
        </member>
        <member name="P:EasySpider.CHttpWebResponse.Target">
            <summary>
            创建当前对象时对应的HttpWebResponse实例
            </summary>
        </member>
        <member name="P:EasySpider.CHttpWebResponse.MemoryStream">
            <summary>
            当前HttpWebResponse实例输出流转换后的内存流
            </summary>
        </member>
        <member name="P:EasySpider.CHttpWebResponse.Encode">
            <summary>
            当前文本的编码（此属性仅当内容是文本时才有用）
            </summary>
        </member>
        <member name="T:EasySpider.ResponseCallback">
            <summary>
            用于异步Http请求的委托类型
            </summary>
            <param name="response">一个封装好的CHttpWebResponse的实例</param>
        </member>
        <member name="T:EasySpider.HttpHeaderSet">
            <summary>
            用于设置HttpWebRequest标头的委托类型
            </summary>
            <param name="request">一个HttpWebRequest实例</param>
            <param name="value">标头值</param>
        </member>
        <member name="T:EasySpider.MatchCallback">
            <summary>
            用于在异步下载资源时处理url
            </summary>
            <param name="url">资源的url</param>
            <returns>返回处理后的url</returns>
        </member>
        <member name="F:EasySpider.Mime.Mimes">
            <summary>
            所有Mime类型，key是文件后缀名（不带点），value是mime类型
            </summary>
        </member>
        <member name="F:EasySpider.Mime.MimesReverse">
            <summary>
            所有Mime类型，key是mime类型，value是文件后缀名（不带点）
            </summary>
        </member>
        <member name="F:EasySpider.Mime.DefaultMime">
            <summary>
            默认mime类型
            </summary>
        </member>
        <member name="M:EasySpider.Mime.#cctor">
            <summary>
            静态构造，在此构造里初始化静态成员
            </summary>
        </member>
        <member name="M:EasySpider.Mime.GetMimeType(System.String)">
            <summary>
            根据文件后缀名获取对应的mime类型
            </summary>
            <param name="ext">后缀名（带点不带点都行）</param>
            <returns>返回文件对应的mime类型，如果没有找到，则返回默认的mime类型</returns>
        </member>
        <member name="M:EasySpider.Mime.GetExtension(System.String)">
            <summary>
            根据mime类型获取对应的文件后缀名
            </summary>
            <param name="mimeType">mime而徐</param>
            <returns>返回mime类型对应的文件后缀名，如果没有找到，则返回空字符串</returns>
        </member>
        <member name="T:EasySpider.DirConfig">
            <summary>
            此类存储所有资源的保存路径
            </summary>
        </member>
        <member name="M:EasySpider.DirConfig.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="htmlDirPath">页面保存文件夹完整路径</param>
            <param name="imgDirPath">图片保存文件夹完整路径</param>
            <param name="jsDirPath">JS保存文件夹完整路径</param>
            <param name="cssDirPath">CSS保存文件夹完整路径</param>
            <param name="flashDirPath">Flash保存文件夹完整路径</param>
        </member>
        <member name="M:EasySpider.DirConfig.CheckLegal">
            <summary>
            检查所有路径是否在同一个磁盘下
            </summary>
            <returns>如果是则返回true，否则返回false</returns>
        </member>
        <member name="M:EasySpider.DirConfig.StrictPath">
            <summary>
            规范好所有路径配置
            </summary>
        </member>
        <member name="M:EasySpider.DirConfig.CreateDir">
            <summary>
            判断指定的目录是否存在，不存在则创建
            </summary>
        </member>
        <member name="P:EasySpider.DirConfig.HtmlDirPath">
            <summary>
            页面保存文件夹完整路径
            </summary>
        </member>
        <member name="P:EasySpider.DirConfig.ImgDirPath">
            <summary>
            图片保存文件夹完整路径
            </summary>
        </member>
        <member name="P:EasySpider.DirConfig.JsDirPath">
            <summary>
            JS保存文件夹完整路径
            </summary>
        </member>
        <member name="P:EasySpider.DirConfig.CssDirPath">
            <summary>
            CSS保存文件夹完整路径
            </summary>
        </member>
        <member name="P:EasySpider.DirConfig.FlashDirPath">
            <summary>
            Flash保存文件夹完整路径
            </summary>
        </member>
        <member name="T:EasySpider.HttpPostFile">
            <summary>
            需要Post到服务器的客户端文件封装
            </summary>
        </member>
        <member name="M:EasySpider.HttpPostFile.FromFilePath(System.String,System.String,System.String)">
            <summary>
            根据一个本地文件路径。创建一个HttpPostFile实例并返回
            </summary>
            <param name="filepath">文件绝对路径</param>
            <param name="clientName">文件在form中的name</param>
            <param name="mime">文件的mime类型，如果为null则自动获取</param>
            <returns>返回一个HttpPostFile实例</returns>
        </member>
        <member name="P:EasySpider.HttpPostFile.Stream">
            <summary>
            文件对应的流
            </summary>
        </member>
        <member name="P:EasySpider.HttpPostFile.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:EasySpider.HttpPostFile.ContentType">
            <summary>
            文件的mime类型
            </summary>
        </member>
        <member name="P:EasySpider.HttpPostFile.ClientName">
            <summary>
            文件在表单中的name
            </summary>
        </member>
        <member name="F:EasySpider.RegexCollection.RegUrl">
            <summary>
            判读一个字符串是否url的正则，其中Groups如下：protocol是协议名，domain是url的域名，port是域名对应的端口，path是url的在服务器上代表的绝对路径（例如/aa/bb,或者/aa/bb.cc/dd.html等等），query是GET传值部分（不包括问好），hash是#后面的部分
            </summary>
        </member>
        <member name="F:EasySpider.RegexCollection.RegFormAction">
            <summary>
            验证form中action的正则，其中Groups["quote"]为单引号，双引号，或者空字符串，Groups["action"]为action的值
            </summary>66
        </member>
        <member name="F:EasySpider.RegexCollection.RegHref">
            <summary>
            验证href的正则，其中Groups["quote"]为单引号，双引号，或者空字符串，Groups["href"]为href的值
            </summary>
        </member>
        <member name="F:EasySpider.RegexCollection.RegSrc">
            <summary>
            验证src的正则，其中Groups["quote"]为单引号，双引号，或者空字符串，Groups["src"]为src的值
            </summary>
        </member>
        <member name="F:EasySpider.RegexCollection.RegLevelDomain">
            <summary>
            从一个域名中获取一级域名
            </summary>
        </member>
        <member name="F:EasySpider.RegexCollection.RegMetaContentType">
            <summary>
            获取HTML中Meta标签中的Content-Type值
            </summary>
        </member>
        <!-- 对于成员“F:EasySpider.RegexCollection.RegScript”忽略有格式错误的 XML 注释 -->
        <member name="F:EasySpider.RegexCollection.RegCssLink">
            <summary>
            验证css引入，如果匹配成功，则Groups["src"]是css文件href的值
            </summary>
        </member>
        <member name="F:EasySpider.RegexCollection.RegScriptLink">
            <summary>
            验证script脚本引入，如果匹配成功，其中Groups["quote"]为单引号，双引号，或者空字符串，则Groups["src"]是Js文件src的值
            </summary>
        </member>
        <member name="F:EasySpider.RegexCollection.RegImg">
            <summary>
            验证Img图片引入，如果匹配成功，其中Groups["quote"]为单引号，双引号，或者空字符串，则Groups["src"]是img标签src的值
            </summary>
        </member>
        <member name="F:EasySpider.RegexCollection.RegFlash">
            <summary>
            验证Falsh引入，如果匹配成功，其中Groups["quote"]为单引号，双引号，或者空字符串，则Groups["src"]是flash的src的值
            </summary>
        </member>
        <member name="F:EasySpider.RegexCollection.RegCssImgUrl">
            <summary>
            验证css文件中引用的图片，如果匹配成功，其中Groups["quote"]为单引号，双引号，或者空字符串，则Groups["src"]是背景图片的url
            </summary>
        </member>
        <member name="F:EasySpider.RegexCollection.RegCssContentType">
            <summary>
            验证css文件中指定的编码类型，如果匹配成功，则Groups[2]是css文件的编码类型
            </summary>
        </member>
        <member name="T:EasySpider.RegOpration">
            <summary>
            一个封装正则相关的字符串处理类
            </summary>
        </member>
        <member name="M:EasySpider.RegOpration.SearchByRegex(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            用指定的正则表达式截取html文本中你想要的内容(全局搜索)
            </summary>
            <param name="html">html字符串</param>
            <param name="reg">正则表达式</param>
            <returns>返回匹配的MatchCollection</returns>
        </member>
        <member name="T:EasySpider.Spider">
            <summary>
            自写的专用于网络爬取类
            </summary>
        </member>
        <member name="M:EasySpider.Spider.Get(System.String)">
            <summary>
            传入一个url地址，向服务器发送请求，获取其返回的HttpWebResponse实例，如果过程中出现错误，则返回null
            </summary>
            <param name="url">一个url地址</param>
            <returns>返回一个请求后得到的HttpWebResponse实例</returns>
        </member>
        <member name="M:EasySpider.Spider.Get(EasySpider.CHttpWebRequest)">
            <summary>
            传入一个CHttpWebRequest的实例，向服务器发送请求，获取其返回的HttpWebResponse实例，如果过程中出现错误，则返回null
            </summary>
            <param name="cRequest">一个CHttpWebRequest实例</param>
            <returns>返回一个请求后得到的HttpWebResponse实例</returns>
        </member>
        <member name="M:EasySpider.Spider.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{EasySpider.HttpPostFile},System.Text.Encoding)">
            <summary>
            使用指定编码（若为null，则使用UTF-8）将一个键值对进行编码，然后发送http的post请求到指定的url，最后返回一个HttpWebResponse（如果出现错误，则返回null）
            </summary>
            <param name="url">url地址</param>
            <param name="keyValues">需要发送到服务器的键值对</param>
            <param name="files">需要提交到服务器的文件列表</param>
            <param name="encoding">指定编码，如果为null则使用默认编码</param>
            <returns>返回一个请求后得到的HttpWebResponse实例</returns>
        </member>
        <member name="M:EasySpider.Spider.Post(EasySpider.CHttpWebRequest,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{EasySpider.HttpPostFile},System.Text.Encoding)">
            <summary>
            传入一个CHttpWebRequest实例，使用指定编码（若为null，则使用UTF-8）向服务器发送http请求，并返回一个HttpWebResponse（如果出现错误，则返回null）
            </summary>
            <param name="cRequest">一个HttpWebRequest，通常会设置一些标头用以欺骗服务器</param>
            <param name="keyValueList">需要发送到服务器的键值对</param>
            <param name="encoding">指定请求编码，如果为null则使用默认编码</param>
            <returns>返回一个请求后得到的HttpWebResponse实例</returns>
        </member>
        <member name="M:EasySpider.Spider.AsyncGet(System.String,EasySpider.ResponseCallback)">
            <summary>
            使用get方式发送一个异步http请求，并传入请求完成后调用的委托
            </summary>
            <param name="url">url地址</param>
            <param name="callback">请求完成后调用的委托</param>
        </member>
        <member name="M:EasySpider.Spider.AsyncGet(EasySpider.CHttpWebRequest,EasySpider.ResponseCallback)">
            <summary>
            使用get方式发送一个异步http请求，并传入请求完成后调用的委托（使用request.BeginGetResponse(responseCallback, request)开始异步请求，request为此方法的第一个参数），之所以有这个重载方法是因为很多时候我们需要手动设置HTTP请求的标头
            </summary>
            <param name="cRequest">一个HttpWebRequest，这个HttpWebRequest通常会根据不同的url地址来设置一些http标头用以骗过服务器</param>
            <param name="callback">请求完成后调用的委托</param>
        </member>
        <member name="M:EasySpider.Spider.AsyncPost(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{EasySpider.HttpPostFile},System.Text.Encoding,EasySpider.ResponseCallback)">
            <summary>
            使用post方式发送一个异步http请求，并传入请求完成后调用的委托
            </summary>
            <param name="url">url地址</param>
            <param name="keyValues">需要发送到服务器的键值对</param>
            <param name="files">需要提交到服务器的文件列表</param>
            <param name="encoding">指定请求编码，如果为null则使用默认编码</param>
            <param name="callback">异步获取发送流的委托，在这个委托里写入要发送给服务器的内容</param>
        </member>
        <member name="M:EasySpider.Spider.AsyncPost(EasySpider.CHttpWebRequest,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{EasySpider.HttpPostFile},System.Text.Encoding,EasySpider.ResponseCallback)">
            <summary>
            使用post方式发送一个异步http请求，并传入请求完成后调用的委托（使用request.BeginGetResponse(responseCallback, request)开始异步请求，request为此方法的第一个参数），之所以有这个重载方法是因为很多时候我们需要手动设置HTTP请求的标头
            </summary>
            <param name="cRequest">一个HttpWebRequest，这个HttpWebRequest通常会根据不同的url地址来设置一些http标头用以骗过服务器</param>
            <param name="keyValues">需要发送到服务器的键值对</param>
            <param name="files">需要提交到服务器的文件列表</param>
            <param name="encoding">指定请求编码，如果为null则使用默认编码</param>
            <param name="callback">异步获取发送流的委托，在这个委托里写入要发送给服务器的内容</param>
        </member>
        <member name="F:EasySpider.Spider.InternalCallback">
            <summary>
            异步请求时公用的委托，在此委托中调用用户自定义的委托
            </summary>
        </member>
        <member name="M:EasySpider.Spider.WriteRequestData(System.Net.HttpWebRequest,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{EasySpider.HttpPostFile},System.Text.Encoding)">
            <summary>
            将需要post到服务器的键值对以及文件写入http请求流中
            </summary>
            <param name="request">一个HttpWebRequest的实例</param>
            <param name="postStream">当前实例的post流，通过HttpWebRequest.GetRerquestStream（同步）或者HttpWebRequest.GetRerquestStream（异步）得到</param>
            <param name="keyValues">键值对</param>
            <param name="files">文件列表</param>
            <param name="encoding">指定请求编码，如果为null则使用默认编码</param>
            <returns>如果写入成功返回true，否则返回false</returns>
        </member>
        <member name="M:EasySpider.Spider.CreateRequest(System.String)">
            <summary>
            根据一个url，创建一个CHttpWebRequest，url需要包含http://
            </summary>
            <param name="url">request的url</param>
            <returns></returns>
        </member>
        <member name="M:EasySpider.Spider.SaveResource(System.String,System.String)">
            <summary>
            使用同步保存资源的函数，自动获取文件名，将css，js，flash，图片等资源文件保存到本地。
            </summary>
            <param name="fileUrl">资源在公网上的url路径</param>
            <param name="dirPath">本地文件夹完整路径，资源文件将保存在此文件夹</param>   
            <returns>如果保存成功，返回文件绝对路径，否则返回null</returns>
        </member>
        <member name="M:EasySpider.Spider.SaveResource(System.String,System.String,System.String)">
            <summary>
            使用同步保存资源的函数，将css，js，flash，图片等资源文件保存到本地
            </summary>
            <param name="fileUrl">资源在公网上的url路径</param>
            <param name="dirPath">本地文件夹完整路径，资源文件将保存在此文件夹</param>   
            <param name="fileName">文件名，如果为null或者String.Empty则自动获取（推荐设置设置为自动获取）</param>
            <returns>如果保存成功，返回文件绝对路径，否则返回null</returns>
        </member>
        <member name="M:EasySpider.Spider.SaveResource(EasySpider.CHttpWebRequest,System.String)">
            <summary>
             使用同步保存资源的函数，自动获取文件名，将css，js，flash，图片等资源文件保存到本地
            </summary>
            <param name="request">一个CHttpWebRequest的实例</param>
            <param name="dirPath">本地文件夹完整路径，资源文件将保存在此文件夹</param>
            <returns>如果保存成功，返回文件绝对路径，否则返回null</returns>
        </member>
        <member name="M:EasySpider.Spider.SaveResource(EasySpider.CHttpWebRequest,System.String,System.String)">
            <summary>
             使用同步保存资源的函数，将css，js，flash，图片等资源文件保存到本地
            </summary>
            <param name="request">一个CHttpWebRequest的实例</param>
            <param name="dirPath">本地文件夹完整路径，资源文件将保存在此文件夹</param>
            <param name="fileName">文件名，如果为null或者String.Empty则自动获取（推荐设置设置为自动获取）</param>
            <returns>如果保存成功，返回文件绝对路径，否则返回null</returns>
        </member>
        <member name="M:EasySpider.Spider.SaveResourceAsync(System.String,System.String,System.Action{System.String})">
            <summary>
            使用异步保存资源的函数，自动获取文件名，将css，js，flash，图片等资源文件保存到本地
            </summary>
            <param name="fileUrl">资源在公网上的url路径</param>
            <param name="dirPath">本地文件夹完整路径，资源文件将保存在此文件夹</param>
            <param name="completed">一个委托实例，下载完成后调用（委托只有一个string参数（如果保存成功此参数为文件在本地的绝对路径，保存失败则为null），无返回值。）</param>        
        </member>
        <member name="M:EasySpider.Spider.SaveResourceAsync(System.String,System.String,System.Action{System.String},System.String)">
            <summary>
            使用异步保存资源的函数，将css，js，flash，图片等资源文件保存到本地
            </summary>
            <param name="fileUrl">资源在公网上的url路径</param>
            <param name="dirPath">本地文件夹完整路径，资源文件将保存在此文件夹</param>
            <param name="completed">一个委托实例，下载完成后调用（委托只有一个string参数（如果保存成功此参数为文件在本地的绝对路径，保存失败则为null），无返回值。）</param>
            <param name="fileName">文件名，如果为null或者String.Empty则自动获取（推荐设置设置为自动获取）</param>
        </member>
        <member name="M:EasySpider.Spider.SaveResourceAsync(EasySpider.CHttpWebRequest,System.String,System.Action{System.String})">
            <summary>
            用异步保存资源的函数，自动获取文件名，将css，js，flash，图片等资源文件保存到本地
            </summary>
            <param name="cRequest">一个CHttpWebRequest的实例</param>
            <param name="dirPath">本地文件夹完整路径，资源文件将保存在此文件夹</param>
            <param name="completed">一个委托实例，下载完成后调用（委托只有一个string参数（如果保存成功此参数为文件在本地的绝对路径，保存失败则为null），无返回值。）</param>
        </member>
        <member name="M:EasySpider.Spider.SaveResourceAsync(EasySpider.CHttpWebRequest,System.String,System.Action{System.String},System.String)">
            <summary>
            用异步保存资源的函数，将css，js，flash，图片等资源文件保存到本地
            </summary>
            <param name="cRequest">一个CHttpWebRequest的实例</param>
            <param name="dirPath">本地文件夹完整路径，资源文件将保存在此文件夹</param>
            <param name="completed">一个委托实例，下载完成后调用（委托只有一个string参数（如果保存成功此参数为文件在本地的绝对路径，保存失败则为null），无返回值。）</param>
            <param name="fileName">文件名，如果为null或者String.Empty则自动获取（推荐设置设置为自动获取）</param>
        </member>
        <member name="M:EasySpider.Spider.SaveFile(EasySpider.CHttpWebResponse,System.String,System.String)">
            <summary>
            从一个CHttpWebResponse实例保存文件到本地
            </summary>
            <param name="cResponse">一个CHttpWebResponse实例</param>
            <param name="dirPath">文件夹的绝对路径</param>
            <param name="fileName">文件名，如果为null或者String.Empty则自动获取（推荐设置设置为自动获取）</param>
            <returns>如果保存成功，返回文件绝对路径，否则返回null</returns>
        </member>
        <member name="M:EasySpider.Spider.SaveFile(EasySpider.CHttpWebResponse,System.String)">
            <summary>
            从一个CHttpWebResponse实例保存文件到本地
            </summary>
            <param name="cResponse">一个CHttpWebResponse实例</param>
            <param name="filePath">文件的绝对路径</param>
            <returns>如果保存成功，返回文件绝对路径，否则返回null</returns>
        </member>
        <member name="T:EasySpider.Utility.EncodeUtility">
            <summary>
            封装编码相关的一些公用方法
            </summary>
        </member>
        <member name="M:EasySpider.Utility.EncodeUtility.GetTextCode(System.String)">
            <summary>
            获取文本文件的编码格式
            </summary>
            <param name="filePath">文件的完整路径</param>
            <returns>返回得到的文本编码，如果获取失败，则返回null</returns>
        </member>
        <member name="M:EasySpider.Utility.EncodeUtility.GetTextCode(System.IO.Stream)">
            <summary>
            获取文本流的编码格式
            </summary>
            <param name="stream">一个流</param>
            <returns>返回得到的文本编码，如果获取失败，则返回null</returns>
        </member>
        <member name="T:EasySpider.Utility.FileUtility">
            <summary>
            封装有关文件操作的一些公用方法
            </summary>
        </member>
        <member name="M:EasySpider.Utility.FileUtility.SaveFile(System.String,System.IO.MemoryStream)">
            <summary>
            根据一个本地路径已经一个描述文件内容的内存流实例，将文件保存的本地。如果有文件路径冲突则不会覆盖保存，而是对比冲突内容，判断是否需要保存为一个不重名的文件
            </summary>
            <param name="filePath">文件保存的绝对路径</param>
            <param name="memoryStream">一个内存流实例</param>
            <returns>如果保存成功，返回文件绝对路径，否则返回null</returns>
        </member>
        <member name="M:EasySpider.Utility.FileUtility.SaveText(System.String,System.String,System.Text.Encoding)">
            <summary>
            将一段文本保存到本地
            </summary>
            <param name="filePath">文件本地路径</param>
            <param name="text">文本内容</param>
            <param name="encode">指定保存编码</param>
            <returns>如果保存成功，返回文件绝对路径，否则返回null</returns>
        </member>
        <member name="M:EasySpider.Utility.FileUtility.ChangeTxtEncode(System.String,System.Text.Encoding)">
            <summary>
            改变某个文件的编码类型
            </summary>
            <param name="path"></param>
            <param name="code"></param>
        </member>
        <member name="M:EasySpider.Utility.FileUtility.GetRandomFileName">
            <summary>
            获取一个8位数的随机文件名
            </summary>        
            <returns>返回文件名</returns>
        </member>
        <member name="M:EasySpider.Utility.FileUtility.GetRandomFileName(System.Int32)">
            <summary>
            获取一个随机文件名
            </summary>
            <param name="count">文件名的位数，必须在1-32之间</param>
            <returns>返回文件名</returns>
        </member>
        <member name="M:EasySpider.Utility.FileUtility.Update(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            修改某个文件的title等等
            </summary>
            <param name="fileName">完全文件名</param>
            <param name="title">title</param>
            <param name="keywords">keywords</param>
            <param name="description">description</param>
            <param name="codeName">文件编码</param>
        </member>
        <member name="M:EasySpider.Utility.PathUtility.ConvertToAbsoluteHref(System.String,System.String)">
            <summary>
            以一个绝对url为参考，将另一个地址也转换为绝对地址
            </summary>
            <param name="absoluteUrl">页面url地址，一个绝对地址</param>
            <param name="href">需要被转换的地址，此地址可能已经是绝对地址也可能是相对地址等等</param>
            <returns>返回一个转换以后的绝对地址</returns>
        </member>
        <member name="M:EasySpider.Utility.PathUtility.GetRelativePath(System.String,System.String)">
            <summary>
            根据一个参考路径和一个要引用的路径，得到一个在参考路径中引用需要被引用的路径的相对路径
            </summary>
            <param name="basePath">参考文件夹的完整路径(此参数必须是一个文件夹路径)</param>
            <param name="referencePath">需要根据相对文件夹路径进行转换的文件夹路径(此参数也可以是一个文件路径，用于获取在目录basePath的某个文件中引用此文件使用的相对路径)</param>       
            <returns>返回一个相对路径，此相对路径用于在basePath中引用dirPath</returns>
        </member>
        <member name="M:EasySpider.Utility.PathUtility.GetNoConflictFilePath(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获取一个不与当前路径冲突的路径，也就是说指定路径已存在则返回一个新路径，否则返回指定路径
            </summary>
            <param name="filePath">文件完整路径</param>        
            <returns>返回可以用的文件完全路径</returns>
        </member>
        <member name="M:EasySpider.Utility.PathUtility.GetFolderLevel(System.String)">
            <summary>
            获取一个路径所含的文件夹的级数，即路径包含的 \ 的数量
            </summary>
            <param name="path">路径</param>
            <returns>返回一个整数</returns>
        </member>
        <member name="M:EasySpider.Utility.PathUtility.GetDirNameByLevel(System.String,System.Int32)">
            <summary>
            获取一个文件夹路径的指定级数的目录名,第n级是第n个 \ 后面的文件夹名
            </summary>
            <param name="path">完整文件夹路劲</param>
            <param name="level">指定的级数</param>
            <returns>指定级数的文件夹名称</returns>
        </member>
        <member name="M:EasySpider.Utility.PathUtility.GetNoConflictFilePath(System.String,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            根据路径判断文件是否已经存在，如果存在则更改文件名称
            </summary>
            <param name="filePath">文件完整路径</param>        
            <param name="count">如果文件已经存在，则在文件后加数字的起始数字</param>
            <param name="conflictList">文件路径冲突列表，将与预订路径都冲突的路径均加入此列表。如果conflictList的数量为0，则说明没有路径冲突。</param>
            <returns>返回可以用文件完全路径</returns>
        </member>
        <member name="M:EasySpider.Utility.StreamUtility.SaveMemoryStream(System.IO.MemoryStream,System.String)">
            <summary>
            将一个内存流保存为本地文件（保存完毕以后不会释放内存流，需要手动释放）
            </summary>
            <param name="memoryStream">内存流实例</param>
            <param name="filePath">完整的文件路径</param>
            <returns>保存成功返回true，否则返回false</returns>
        </member>
        <member name="M:EasySpider.Utility.StreamUtility.IsEqual(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            判读两个流是否完全相等，比较完毕以后，如果两个流均支持CanSeek，则会将他们的位置设置到流的起始处
            </summary>
            <param name="left">第一个流</param>
            <param name="right">第二个流</param>
            <param name="close">比较完毕以后是否关闭两个流</param> 
            <returns>如果两个流中的完全相等，返回true，否则返回false</returns>
        </member>
        <member name="M:EasySpider.Utility.StreamUtility.CloneMemory(System.IO.MemoryStream)">
             <summary>
            将一个内存流复制到一个新的内存流
             </summary>
             <param name="memory">一个内存流</param>
             <returns>返回一个新的内存流实例，不要忘记释放</returns>
        </member>
        <member name="T:EasySpider.WebPage">
            <summary>
            HTML内容封装类，提供页面内容处理的相关方法
            </summary>
        </member>
        <member name="M:EasySpider.WebPage.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="html">一段完整的html文本</param>        
        </member>
        <member name="M:EasySpider.WebPage.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="html">一段完整的html文本</param>
            <param name="url">页面的Url</param>
            <param name="encode">页面内容的编码格式</param>
        </member>
        <member name="M:EasySpider.WebPage.GetAllHref">
            <summary>
            获取一个页面里所有href
            </summary>
            <returns>返回一个href组成的字符串数组，如果未找到则返回一个空数组</returns>
        </member>
        <member name="M:EasySpider.WebPage.GetAllAction(System.String)">
            <summary>
            根据一个html串，获取所有form提交的action
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:EasySpider.WebPage.FilterScript">
            <summary>
            得到一个过滤掉html中的所有script的字符串
            </summary>
            <returns>返回过滤以后的html内容</returns>
        </member>
        <member name="M:EasySpider.WebPage.GetTitle">
            <summary>
            获取当前页面的Title
            </summary>        
            <returns>返回当前页面的Title</returns>
        </member>
        <member name="M:EasySpider.WebPage.GetKeywords">
            <summary>
            获取当前页面的Keywords
            </summary>
            <returns>返回当前页面的Keywords</returns>
        </member>
        <member name="M:EasySpider.WebPage.SaveHtml(System.String,System.Boolean)">
            <summary>
            将html内容中的所有src和href地址转为为绝对地址，然后使用指定编码和路径保存为html文件（使用此方法，需要指定当前页面的Url）
            </summary>
            <param name="filePath">文件路径</param>
            <param name="ignoreScript">保存的时候是否忽略Script标签，若为true，则忽略JS</param>        
            <returns>如果下载成功，返回文件的本地路径，否则返回null</returns>
        </member>
        <member name="M:EasySpider.WebPage.SaveHtmlAndResource(System.String,System.Boolean,EasySpider.DirConfig)">
             <summary>
            使用同步方式下载，将html内容保存为html文件，并将html内容中引用的图片，css，js，flash都保存到本地，然后将html内容中引用的地址都转换为相对地址
             </summary>
             <param name="fileName">保存的文件名</param>                
             <param name="ignoreScript">保存的时候是否忽略Script标签，若为true，则忽略JS</param>
             <param name="dirConfig">页面下载文件夹相关配置信息</param>  
             <returns>如果下载成功，返回文件的本地路径，否则返回null</returns>
        </member>
        <member name="M:EasySpider.WebPage.AsyncSaveHtmlAndResource(System.String,System.Boolean,EasySpider.DirConfig)">
             <summary>
            使用异步方式下载，将html内容保存为html文件，并将html内容中引用的图片，css，js，flash都保存到本地，然后将html内容中引用的地址都转换为相对地址
             </summary>
             <param name="fileName">保存的文件名</param>                
             <param name="ignoreScript">保存的时候是否忽略Script标签，若为true，则忽略JS</param>
             <param name="dirConfig">页面下载文件夹相关配置信息</param>  
             <returns>如果下载成功，返回文件的本地路径，否则返回null</returns>
        </member>
        <member name="M:EasySpider.WebPage.MatchUrl(System.Text.RegularExpressions.Match,System.String,System.String,System.String,System.String,EasySpider.MatchCallback,EasySpider.MatchCallback)">
            <summary>
            替换将js、css、图片、flash等文件下载到本地后，调用此方法获取在页面中引用本地文件的路径
            </summary>
            <param name="match">匹配到的js、css、图片、flash等标签的正则实例</param>
            <param name="resourceUrl">当前html页面或者css文件的url。此url用于将其内容中的相对地址转换为绝对地址并下载</param>
            <param name="referenceDir">引用图片的文件所在目录（可能是html文件所在目录，也能是css文件所在目录）</param>
            <param name="saveDir">下载文件存放的目录</param>
            <param name="regGroupName">指定匹配url的正则分组的组名</param>
            <param name="urlHandle">指定对匹配url进行处理的函数回调</param>
            <param name="downloadHandle">指定自定义下载处理的函数回调，此回调返回下载文件的本地路径或者占位符</param>
            <returns>返回替换后的标签字符串</returns>
        </member>
        <member name="M:EasySpider.WebPage.MatchUrl(System.Text.RegularExpressions.Match,System.String,System.String,System.String,System.String,EasySpider.MatchCallback,EasySpider.MatchCallback,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            替换将js、css、图片、flash等文件下载到本地后，调用此方法获取在页面中引用本地文件的路径
            </summary>
            <param name="match">匹配到的js、css、图片、flash等标签的正则实例</param>
            <param name="resourceUrl">当前html页面或者css文件的url。此url用于将其内容中的相对地址转换为绝对地址并下载</param>
            <param name="referenceDir">引用图片的文件所在目录（可能是html文件所在目录，也能是css文件所在目录）</param>
            <param name="saveDir">下载文件存放的目录</param>
            <param name="regGroupName">指定匹配url的正则分组的组名</param>
            <param name="urlHandle">指定对匹配url(也就是href或者src)进行处理的函数回调，此回调主要对url进行一些处理（例如去引号等等）</param>
            <param name="downloadHandle">指定自定义下载处理的函数回调，此回调返回下载文件的本地路径或者占位符</param>
            <param name="async">是否异步下载</param>
            <param name="dic">记录异步下载信息的字典</param>
            <returns>返回替换后的标签字符串</returns>
        </member>
        <member name="M:EasySpider.WebPage.ReplaceBackgroundUrl(System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            操作一段html文本或者css文本，将其中使用样式background:url(...)指定的图片下载到本地，并更改路径
            </summary>
            <param name="content">一段html或者css文本</param>
            <param name="cssUrl">css文件的url，如果是内嵌css则此url为css所在页面的url</param>
            <param name="referenceDir">引用图片的文件所在目录（可能是html文件所在目录，也能是css文件所在目录）</param>
            <param name="saveDir">下载图片存放的目录</param>
            <param name="async">是否异步下载</param>
            <param name="dic">记录异步下载信息的字典</param>
            <returns>返回替换后的文本</returns>
        </member>
        <member name="M:EasySpider.WebPage.GetPlaceHolder">
            <summary>
            获取一个随机占位符
            </summary>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:EasySpider.WebPage.ReplacePlaceHolder(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            确认资源异步下载都已经下载完成，然后将内容中的占位符替换为引用路径
            </summary>
            <param name="content">存储异步下载信息的字典</param>
            <param name="dic">存储异步下载信息的字典</param>
            <returns>返回替换以后的字符串</returns>
        </member>
        <member name="P:EasySpider.WebPage.Html">
            <summary>
            页面的完整html文本
            </summary>
        </member>
        <member name="P:EasySpider.WebPage.PageUrl">
            <summary>
            页面的Url，保存文件时使用
            </summary>
        </member>
        <member name="P:EasySpider.WebPage.Encode">
            <summary>
            html的编码，保存文件时使用
            </summary>
        </member>
    </members>
</doc>
